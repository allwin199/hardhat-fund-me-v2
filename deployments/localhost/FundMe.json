{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NOT_ENOUGH_ETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NOT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__WITHDRAW_FAILED",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xacee00f84bee5011461e47758ea81366e215d1623e99ef926711ace6539f45f7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "785365",
    "logsBloom": "0x
    "blockHash": "0x4c7a12d87e39852d8d4a1aa3c5096a021038e8f038ea6f6e9444d7cb253520c1",
    "transactionHash": "0xacee00f84bee5011461e47758ea81366e215d1623e99ef926711ace6539f45f7",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "785365",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "a9cf245bf4c9b95f30d5a2c359cdd50d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NOT_ENOUGH_ETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NOT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__WITHDRAW_FAILED\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"notice\":\"View / Pure functions(Getters)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {PriceConverter} from \\\"./PriceConverter.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// similar to wallets, contracts can hold funds as well\\n// To receive fund, we have to make the function as payable\\n\\n// cutom errors\\nerror FundMe__NOT_OWNER();\\nerror FundMe__WITHDRAW_FAILED();\\nerror FundMe__NOT_ENOUGH_ETH();\\n\\ncontract FundMe {\\n    address private immutable i_owner;\\n\\n    using PriceConverter for uint256;\\n    // Attaching PriceConverter library to all uin256\\n    // now all uint256 will have access to PriceConverter library\\n\\n    uint256 private constant MINIMUM_USD = 5 * 1e18;\\n    // since priceInUsd will have 18 deciamls, we also need minimum usd to have 18 decimals;\\n\\n    address[] private s_funders;\\n    mapping(address funder => uint256 amountFunded)\\n        private s_addressToAmountFunded;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address _priceFeed) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    function fund() public payable {\\n        uint256 ethPriceInUsd = (msg.value).getConversionRate(s_priceFeed);\\n        if (ethPriceInUsd < MINIMUM_USD) revert FundMe__NOT_ENOUGH_ETH();\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        address[] memory existingFunders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < existingFunders.length;\\n            funderIndex++\\n        ) {\\n            address funder = existingFunders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // we are resetting the array.\\n        // (0) -> we are asking to start at 0.\\n\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        if (!sent) revert FundMe__WITHDRAW_FAILED();\\n    }\\n\\n    modifier onlyOwner() {\\n        // By using revert, we can return the error code instead of string\\n        if (msg.sender != i_owner) revert FundMe__NOT_OWNER();\\n        _;\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * View / Pure functions(Getters)\\n     */\\n    function getAddressToAmountFunded(\\n        address _fundingAddress\\n    ) external view returns (uint256) {\\n        return s_addressToAmountFunded[_fundingAddress];\\n    }\\n\\n    function getFunder(uint256 _index) external view returns (address) {\\n        return s_funders[_index];\\n    }\\n\\n    function getOwner() external view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getMinimumUsd() external pure returns (uint256) {\\n        return MINIMUM_USD;\\n    }\\n\\n    function getPriceFeedAddress() external view returns (address) {\\n        return address(s_priceFeed);\\n    }\\n}\\n\",\"keccak256\":\"0xe29b16fd6464fb916a8ce20a520bd5854532bdd09dab4c0d187f21f1e6199497\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Solidity only works with whole numbers\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface _priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = _priceFeed.latestRoundData();\\n\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface _priceFeed\\n    ) internal view returns (uint256) {\\n        // 1 ETH ?\\n        // To get the price of 1 ETH in USD, we are calling the getPrice()\\n\\n        uint256 ethPrice = getPrice(_priceFeed);\\n\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n\\n        return ethAmountInUsd;\\n    }\\n}\\n\\n// Refer foundry-fundme for more details\\n\",\"keccak256\":\"0xbedaf3df8b4e0f71dc1a055d1ef2affd57524e8504ed8aed483b426b092e983a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e2e380380610e2e83398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610ccf61015f6000396000818161035501526105f20152610ccf6000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461010c578063b60d428814610137578063c003bf1214610141578063d7b4750c1461016c57610083565b80630343fb251461008d5780630f0f30b2146100ca5780633ccfd60b146100f557610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610844565b6102e0565b6040516100c1919061088a565b60405180910390f35b3480156100d657600080fd5b506100df610329565b6040516100ec91906108b4565b60405180910390f35b34801561010157600080fd5b5061010a610353565b005b34801561011857600080fd5b506101216105ee565b60405161012e91906108b4565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610616565b604051610163919061088a565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108fb565b610626565b6040516101a091906108b4565b60405180910390f35b60006101e0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461066d90919063ffffffff16565b9050674563918244f40000811015610224576040517f762f6efe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d69190610957565b9250508190555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d8576040517f94fca7b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561045b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610411575b5050505050905060005b81518110156104e65760008282815181106104835761048261098b565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104de906109ba565b915050610465565b50600067ffffffffffffffff81111561050257610501610a02565b5b6040519080825280602002602001820160405280156105305781602001602082028036833780820191505090505b506000908051906020019061054692919061073a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056d90610a62565b60006040518083038185875af1925050503d80600081146105aa576040519150601f19603f3d011682016040523d82523d6000602084013e6105af565b606091505b50509050806105ea576040517fff139d2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000674563918244f40000905090565b600080828154811061063b5761063a61098b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610679836106a9565b90506000670de0b6b3a764000085836106929190610a77565b61069c9190610ae8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b9190610ba6565b5050509150506402540be400816107329190610c21565b915050919050565b8280548282559060005260206000209081019282156107b3579160200282015b828111156107b25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061075a565b5b5090506107c091906107c4565b5090565b5b808211156107dd5760008160009055506001016107c5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610811826107e6565b9050919050565b61082181610806565b811461082c57600080fd5b50565b60008135905061083e81610818565b92915050565b60006020828403121561085a576108596107e1565b5b60006108688482850161082f565b91505092915050565b6000819050919050565b61088481610871565b82525050565b600060208201905061089f600083018461087b565b92915050565b6108ae81610806565b82525050565b60006020820190506108c960008301846108a5565b92915050565b6108d881610871565b81146108e357600080fd5b50565b6000813590506108f5816108cf565b92915050565b600060208284031215610911576109106107e1565b5b600061091f848285016108e6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061096282610871565b915061096d83610871565b925082820190508082111561098557610984610928565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006109c582610871565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109f7576109f6610928565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a4c600083610a31565b9150610a5782610a3c565b600082019050919050565b6000610a6d82610a3f565b9150819050919050565b6000610a8282610871565b9150610a8d83610871565b9250828202610a9b81610871565b91508282048414831517610ab257610ab1610928565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610af382610871565b9150610afe83610871565b925082610b0e57610b0d610ab9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b3881610b19565b8114610b4357600080fd5b50565b600081519050610b5581610b2f565b92915050565b6000819050919050565b610b6e81610b5b565b8114610b7957600080fd5b50565b600081519050610b8b81610b65565b92915050565b600081519050610ba0816108cf565b92915050565b600080600080600060a08688031215610bc257610bc16107e1565b5b6000610bd088828901610b46565b9550506020610be188828901610b7c565b9450506040610bf288828901610b91565b9350506060610c0388828901610b91565b9250506080610c1488828901610b46565b9150509295509295909350565b6000610c2c82610b5b565b9150610c3783610b5b565b9250828202610c4581610b5b565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610c7d57610c7c610928565b5b8282058414831517610c9257610c91610928565b5b509291505056fea26469706673582212202c7fca6fe7d85be8369979c6459c0f590079e3016db458466422c2d3e53ce8b964736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461010c578063b60d428814610137578063c003bf1214610141578063d7b4750c1461016c57610083565b80630343fb251461008d5780630f0f30b2146100ca5780633ccfd60b146100f557610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610844565b6102e0565b6040516100c1919061088a565b60405180910390f35b3480156100d657600080fd5b506100df610329565b6040516100ec91906108b4565b60405180910390f35b34801561010157600080fd5b5061010a610353565b005b34801561011857600080fd5b506101216105ee565b60405161012e91906108b4565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610616565b604051610163919061088a565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108fb565b610626565b6040516101a091906108b4565b60405180910390f35b60006101e0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461066d90919063ffffffff16565b9050674563918244f40000811015610224576040517f762f6efe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d69190610957565b9250508190555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d8576040517f94fca7b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561045b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610411575b5050505050905060005b81518110156104e65760008282815181106104835761048261098b565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104de906109ba565b915050610465565b50600067ffffffffffffffff81111561050257610501610a02565b5b6040519080825280602002602001820160405280156105305781602001602082028036833780820191505090505b506000908051906020019061054692919061073a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056d90610a62565b60006040518083038185875af1925050503d80600081146105aa576040519150601f19603f3d011682016040523d82523d6000602084013e6105af565b606091505b50509050806105ea576040517fff139d2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000674563918244f40000905090565b600080828154811061063b5761063a61098b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610679836106a9565b90506000670de0b6b3a764000085836106929190610a77565b61069c9190610ae8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b9190610ba6565b5050509150506402540be400816107329190610c21565b915050919050565b8280548282559060005260206000209081019282156107b3579160200282015b828111156107b25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061075a565b5b5090506107c091906107c4565b5090565b5b808211156107dd5760008160009055506001016107c5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610811826107e6565b9050919050565b61082181610806565b811461082c57600080fd5b50565b60008135905061083e81610818565b92915050565b60006020828403121561085a576108596107e1565b5b60006108688482850161082f565b91505092915050565b6000819050919050565b61088481610871565b82525050565b600060208201905061089f600083018461087b565b92915050565b6108ae81610806565b82525050565b60006020820190506108c960008301846108a5565b92915050565b6108d881610871565b81146108e357600080fd5b50565b6000813590506108f5816108cf565b92915050565b600060208284031215610911576109106107e1565b5b600061091f848285016108e6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061096282610871565b915061096d83610871565b925082820190508082111561098557610984610928565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006109c582610871565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109f7576109f6610928565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a4c600083610a31565b9150610a5782610a3c565b600082019050919050565b6000610a6d82610a3f565b9150819050919050565b6000610a8282610871565b9150610a8d83610871565b9250828202610a9b81610871565b91508282048414831517610ab257610ab1610928565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610af382610871565b9150610afe83610871565b925082610b0e57610b0d610ab9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b3881610b19565b8114610b4357600080fd5b50565b600081519050610b5581610b2f565b92915050565b6000819050919050565b610b6e81610b5b565b8114610b7957600080fd5b50565b600081519050610b8b81610b65565b92915050565b600081519050610ba0816108cf565b92915050565b600080600080600060a08688031215610bc257610bc16107e1565b5b6000610bd088828901610b46565b9550506020610be188828901610b7c565b9450506040610bf288828901610b91565b9350506060610c0388828901610b91565b9250506080610c1488828901610b46565b9150509295509295909350565b6000610c2c82610b5b565b9150610c3783610b5b565b9250828202610c4581610b5b565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610c7d57610c7c610928565b5b8282058414831517610c9257610c91610928565b5b509291505056fea26469706673582212202c7fca6fe7d85be8369979c6459c0f590079e3016db458466422c2d3e53ce8b964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "notice": "View / Pure functions(Getters)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 333,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 337,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 340,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}